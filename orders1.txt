<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Dashboard Template for Bootstrap</title>


    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/dashboard.css" rel="stylesheet">



    <script type="text/javascript" src="js/jquery.min.js"></script>
    <script src="js/tether.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/parse.min.js"></script>
    <script src="js/underscore-min.js"></script>
    <script type="text/javascript" src="js/common.js"></script>

    <style>
        #myInput {
            background-image: url('img/searchicon.png'); /* Add a search icon to input */
            background-position: 10px 12px; /* Position the search icon */
            background-repeat: no-repeat; /* Do not repeat the icon image */
            width: 100%; /* Full-width */
            font-size: 16px; /* Increase font-size */
            padding: 12px 20px 12px 40px; /* Add some padding */
            border: 1px solid #ddd; /* Add a grey border */
            margin-bottom: 12px; /* Add some space below the input */
        }

    </style>

</head>

<body>
<nav class="navbar navbar-toggleable-md navbar-inverse fixed-top bg-inverse">
    <button class="navbar-toggler navbar-toggler-right hidden-lg-up" type="button" data-toggle="collapse"
            data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false"
            aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <a class="navbar-brand" href="#">Orders</a>

</nav>

<div class="container-fluid">
    <div class="row">
        <nav id="sidebar" class="col-sm-3 col-md-2 hidden-xs-down bg-faded sidebar">

        </nav>

        <main class="col-sm-9 offset-sm-3 col-md-10 offset-md-2 pt-3">

            <div id="content" class="table-responsive">
                <h1>Orders</h1>

                <input type="text" id="myInput" onkeyup="myFunction()" placeholder="What are you looking for?..">

                <ul class="nav nav-tabs">

                    <li class="active" ><a id="pending" href="#">Pending Orders</a></li>
                    <li><a id="completed" href="#">Completed Orders</a></li>
                    <li><a id="cancelled" href="#">Cancelled</a></li>
                </ul>

                <table id="myTable" class="table table-striped table table-hover table-bordered results">
                    <thead>
                    <tr>

                        <td>#</td>
                        <td>Content</td>
                        <td>Waiter</td>
                        <td>Table</td>
                        <td>Date</td>
                        <td>Status</td>
                        <td>Total (No Tax/Service)</td>
                        <td>Total</td>
                        <td>Actions</td>
                    </tr>
                    </thead>
                    <tbody id="orders-body">

                    </tbody>

                </table>
            </div>

            <div id="bill">

                <div id="bill_content">

                </div>

                <br/>

                <button id="finish-order" class="new-button" href="#">Finish Order</button>
                <button id="cancel" class="new-button" href="#">Back</button>


            </div>

        </main>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {
        check_auth("Orders");

        $("#content").show();
        $("#bill").hide();
        getOrders();


        let query = new Parse.Query(Order);
        let subscription = query.subscribe();

        subscription.on('create', (object) => {
            console.log("New Order added");
            getOrders();

        });

    $(".search").keyup(function () {
        var searchTerm = $(".search").val();
        var listItem = $('.results tbody').children('tr');
        var searchSplit = searchTerm.replace(/ /g, "'):containsi('")

        $.extend($.expr[':'], {'containsi': function(elem, i, match, array){
            return (elem.textContent || elem.innerText || '').toLowerCase().indexOf((match[3] || "").toLowerCase()) >= 0;
        }
        });

        $(".results tbody tr").not(":containsi('" + searchSplit + "')").each(function(e){
            $(this).attr('visible','false');
        });

        $(".results tbody tr:containsi('" + searchSplit + "')").each(function(e){
            $(this).attr('visible','true');
        });

        var jobCount = $('.results tbody tr[visible="true"]').length;
        $('.counter').text(jobCount + ' item');

        if(jobCount == '0') {$('.no-result').show();}
        else {$('.no-result').hide();}
    });



    }) ;



    function strcmp(a, b) {
        return (a < b ? -1 : (a > b ? 1 : 0));
    }

    $("#finish-order").click(function () {
        event.preventDefault();

        console.log("object_id: " + object_id);
        var query = new Parse.Query(Order);
        query.equalTo("objectId", object_id);
        query.find({
            success: function (results) {
                var order = results[0];
                if (order.get("status") === "PENDING") {
                    order.set("status", "COMPLETED");
                    order.save({
                        success: function () {
                            window.location.href = "orders.html";
                        }, error: function (error) {
                            console.log(error.message);
                        }
                    });
                } else {
                    alert("Cannot bill order, invalid state");
                }
            },
            error: function (error) {
                console.log("Query Error: " + error.message);
            }
        });
    });

    $("#cancel").click(function () {
        window.location.href = "orders.html";
    });

    $("#orders-body").on("click", "button", function (event) {
        event.preventDefault();

        var id = $(this).attr("href");
        var action = $(this).attr("action");
        console.log("action: " + action);
        object_id = id;
        var query = new Parse.Query(Order);

        query.equalTo("objectId", id);
        query.find({
            success: function (results) {
                if (action == "bill") {
                    $("#content").hide();
                    $("#bill").show();
                    var order = results[0];
                    var output = "";
                    output += "<h1>Bill of Order #" + order.get("number") + "</h1>";
                    output += "<table><tr>";
                    output += "<td>Date</td><td>" + order.get("date") + "</td>";
                    output += "</tr><tr>";
                    output += "<td>Waiter</td><td>" + order.get("waiter").get("displayname") + "</td>";
                    output += "</tr><tr>";
                    output += "<td>Table</td><td>" + order.get("table") + "</td>";
                    output += "</tr><tr>";
                    output += "<td>Status</td><td>" + order.get("status") + "</td>";
                    output += "</tr><tr><td></td><td>";

                    var meals = results[0].get("order_items");
                    for (var j in meals) {
                        output += "<li>" +  meals[j].get("meal") + " - $US " + meals[j].get("order_price") + "<br />" +
                        meals[j].get("mix_name") + " - $US " + meals[j].get("mix_price") +
                        "</li>";
                    }

                    output += "</td></tr><tr>";
                    output += "<td>Total (No Tax/Service)</td><td> $" + order.get("bill_no_tax_service") + " USD</td>";
                    output += "</tr><tr>";
                    output += "<td>Total</td><td> $" + order.get("bill_tax_service") + " USD</td>";
                    output += "</tr>";

                    $("#bill_content").html(output);
                } else if (action == "cancel") {
                    if (confirm("Are you sure!") == true) {
                        var order = results[0];
                        order.set("status", "CANCELLED");
                        order.save({
                            success: function () {
                                window.location.href = "orders.html";
                            }, error: function (error) {
                                console.log(error.message);
                            }
                        });
                    }

                }
            },
            error: function (error) {
                console.log("Query Error: " + error.message);
            }
        });

    });


    function getOrders3() {
        //var Order = Parse.Object.extend("Order");
        var query = new Parse.Query(Order);
        //query.limit(5);
        //query.descending("createdAt");
        var output = "<tr>";
        query.include("meals");
        query.find().then(function (orders) {
            var cb = _.after(orders.length, function () {

                $("#orders-body").html(output);
                console.log("finished");
            });


            _.each(orders, function (order) {
                console.log("order: " + order.get("number"));
                output += "<td>" + order.get("number") + "</td>";
                output += "<td width=30%>" + order.get("meals_str") + "</td>";
                output += "<td>" + order.get("waiter").getUsername() + "</td>";
                output += "<td>" + order.get("table") + "</td>";
                output += "<td>" + order.get("date") + "</td>";
                output += "<td>" + order.get("status") + "</td>";
                output += "<td> $" + order.get("bill_no_tax_service") + " USD</td>";
                output += "<td> $" + order.get("bill_tax_service") + " USD</td>";
                output += "<td><button href='" + order.id + "' action='bill'>Bill</button> ";
                output += "<button href='" + order.id + "' action='cancel'>Cancel</button></td>";
                cb();
            });
        });


    }

    function getOrders2() {
        //var Order = Parse.Object.extend("Order");
        var query = new Parse.Query(Order);
        //query.limit(5);
        //query.descending("createdAt");
        var output = "<tr>";

        var arr = new Array();

        query.find().then(function (orders) {
            var cb = _.after(orders.length, function () {
                output += "<td><button href=action='bill'>Bill Order</button></td></tr>";
                $("#orders-body").html(output);
                console.log("finished");
            });


            _.each(orders, function (order) {
                console.log("order: " + order.get("number"));
                output += "<td>" + order.get("number") + "</td>";
                output += "<td>" + order.get("waiter").getUsername() + "</td>";
                output += "<td>" + order.get("table") + "</td>";
                output += "<td>" + order.get("status") + "</td>";
                output += "<td>" + order.get("date") + "</td>";


                var rel_items = order.relation("order_items");
                rel_items.query().find().then(function (items) {


                    output += "<ul>";
                    _.each(items, function (item) {
                        console.log("item: " + item.get("meal"));
                        output += "</li>";
                        output += item.get("meal");
                        output += " - QTY: " + item.get("quantity");
                        output += " - PRICE: $" + item.get("price") + " USD";
                        output += "</li>";

                        cb();
                    });


                });


            });
        });


    }

    function getOrders(status) {
        var query = new Parse.Query(Order);
        query.include("order_items");
        query.include("waiter");
        query.equalTo("status", status)
        query.descending("createdAt");
        query.find({
            success: function (results) {
                var output = "";

                for (var i in results) {
                    var order = results[i];
                    //var meals = results[i].get("order_items");
                    console.log("meals: " + JSON.stringify(meals));

                    var number = order.get("number");
                    //var meals = results[i].get("meals");
                    var waiter = order.get("waiter");
                    var table = order.get("table");
                    var date = order.get("date");
                    var status = order.get("status");
                    var id = order.id;

                    output += "<tr>";
                    //output += "<td><img width=150 src='" + order.get("order_image") + "' /></td>";
                    output += "<td>" + order.get("number") + "</td>";

                    output += "<td width=300>";
                    output += "<ul>";
                    var meals = results[i].get("order_items");
                    for (var j in meals) {
                        output += "<li>" +  meals[j].get("meal") + " - $US " + meals[j].get("order_price") + "<br />" +
                                            meals[j].get("mix_name") + " - $US " + meals[j].get("mix_price") +
                        "</li>";
                    }

                    output += "</ul>";
                    output += "</td>";
                    var waiter = order.get("waiter");
                    output += "<td>" + waiter.get("displayname") + "</td>";
                    output += "<td>" + order.get("table") + "</td>";
                    output += "<td>" + order.get("date") + "</td>";
                    output += "<td>" + order.get("status") + "</td>";
                    output += "<td>" + order.get("bill_no_tax_service") + "</td>";
                    output += "<td>" + order.get("bill_tax_service") + "</td>";


                    output += "<td><button href='" + order.id + "' action='bill'>Bill</button> ";
                    output += "<button href='" + order.id + "' action='cancel'>Cancel</button></td>";
                    output += "</tr>";
                }
                $("#orders-body").html(output);


            },
            error: function (error) {
                console.log("Query Error: " + error.message);
            }
        });

    }


    $("#new-category-form").submit(function (event) {
        event.preventDefault();
        var name = $("#category-name").val();
        var order = $("#category-order").val();

        var fileUploadControl = $("#pic")[0];
        if (fileUploadControl.files.length > 0) {
            var file = fileUploadControl.files[0];
            var filename = name + ".png";

            var parseFile = new Parse.File(filename, file);

            //put this inside if {
            parseFile.save().then(function () {
                console.log("Image uploaded successfully...");
            }, function (error) {
                console.log("Error Uploading Image: " + error.message);
            });
        }

        if (object_id != null) {
            var query = new Parse.Query(Category);
            query.equalTo("objectId", object_id);
            query.find({
                success: function (results) {
                    var category = results[0];

                    category.set("name", name);
                    category.set("order", parseInt(order));
                    if (parseFile != null) {
                        category.set("image", parseFile);
                    }

                    category.save({
                        success: function () {
                            //alert("Category has been saved successfully...");
                            $("content").show();
                            $("form").hide();
                            getCategories();
                            //location.reload();

                        },
                        error: function (error) {
                            console.log("Error: " + error.message);
                        }
                    });
                },
                error: function (error) {
                    console.log("Query Error: " + error.message);
                }
            });
        } else {
            var category = new Category();
            category.set("name", name);
            category.set("order", parseInt(order));
            if (parseFile != null) {
                category.set("image", parseFile);
            }

            category.save({
                success: function () {
                    //alert("Category has been saved successfully...");
                    $("content").show();
                    $("form").hide();
                    getCategories();
                    //location.reload();

                },
                error: function (error) {
                    console.log("Error: " + error.message);
                }
            });
        }
    });

</script>


</body>

</html>
